swagger: "2.0"
info:
  description: "This is the API spec for budget-planner"
  version: "1.0.0"
  title: "Budget Planner API"
  termsOfService: ""
  contact:
    email: "team@bplanner.de"
  license:
    name: "Commercial"
host: "localhost:8080"
basePath: "/v1"
tags:
- name: "Transaction"
  description: "Transactions"
- name: "Tags"
  description: "Tags .. ya know"
schemes:
- "http"
paths:
  /transactions/:
    get:
      tags:
      - "Transaction"
      summary: "Get transactions for current month by default"
      description: "sorted by date descending"
      operationId: "getTransactions"
      produces:
      - "application/json"
      parameters:
      - name: "account"
        in: "query"
        description: "Search string for account"
        required: false
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Transaction"
        "400":
          description: "Invalid status value"
      security:
      - bplanner:
        - "write:transactions"
        - "read:transactions"
    post:
      tags:
      - "Transaction"
      summary: "Add a new transactions"
      description: "Inserts new transactions into database"
      operationId: "addTransaction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "transactions object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Transaction"
      responses:
        "405":
          description: "Invalid input"
      security:
      - bplanner:
        - "write:transactions"
        - "read:transactions"
  /transactions/csv/:
    post:
      tags:
      - "Transaction"
      summary: "Add a new transactions"
      description: "Inserts new transactions into database"
      operationId: "uploadTransCsv"
      consumes:
      - "multipart/form-data"
      produces:
      - "text"      
      parameters:
      - in: "formData"
        name: "transfile"
        description: "file for csv upload"
        required: true
        type: file
      responses:
        "405":
          description: "Invalid input"
      security:
      - bplanner:
        - "write:transactions"
        - "read:transactions"
  /transactions/{id}:
    put:
      tags:
      - "Transaction"
      summary: "Update an existing transaction"
      description: ""
      operationId: "updateTransaction"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Transaction that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Transaction"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Transaction not found"
        "405":
          description: "Validation exception"
      security:
      - bplanner:
        - "write:transaction"
        - "read:transaction" 
  /tags/:
    get:
      tags:
      - "Tags"
      summary: "Get tasg"
      description: "sorted by name"
      operationId: "getTags"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            items:
              $ref: "#/definitions/TagList"
        "400":
          description: "Invalid status value"
      security:
      - bplanner:
        - "write:tags"
        - "read:tags"
    post:
      tags:
      - "Tags"
      summary: "Add a new tag"
      description: "Inserts new tag into database"
      operationId: "addTag"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "tag object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Tag"
      responses:
        "405":
          description: "Invalid input"
      security:
      - bplanner:
        - "write:tags"
        - "read:tags"
  /tags/{id}:
    put:
      tags:
      - "Tags"
      summary: "Update an existing tag"
      description: ""
      operationId: "updateTag"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Transaction that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Tag"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Transaction not found"
        "405":
          description: "Validation exception"
      security:
      - bplanner:
        - "write:tags"
        - "read:tags" 
securityDefinitions:
  bplanner_auth:
    type: "oauth2"
    authorizationUrl: "http://localhost/oauth/dialog"
    flow: "implicit"
    scopes:
      write:transactions: "modify transactions in your account"
      read:transactions: "read your transactions"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  TransactionsByMonth:
    type: "object"
    properties:
      name: 
        type: "string"
      tansactions:
        $ref: "#/definitions/TransactionList"        
  TransactionList:
    type: "array"
    items:
      $ref: "#/definitions/Transaction"
  Transaction:
    type: "object"
    required:
    - "id"
    - "date"
    - "value"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      date: 
        type: "string" 
      value: 
        type: "string" 
      type: 
        type: "string" 
      name: 
        type: "string" 
      description: 
        type: "string" 
      ref: 
        type: "string" 
      booked: 
        type: "string" 
      valuta: 
        type: "string"      
  TagList:
    type: "array"
    items:
      $ref: "#/definitions/Tag"
  Tag:
    type: "object"
    required:
    - "id"
    - "name"
    - "color"
    properties:
      id:
        type: "integer"
        format: "int64"
      name: 
        type: "string" 
      description: 
        type: "string" 
      color: 
        type: "string" 